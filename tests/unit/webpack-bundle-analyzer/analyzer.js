const fs = require('fs');
const del = require('del');
const sinon = require('sinon');
const childProcess = require('child_process');
const chaiSubset = require('chai-subset');

const chai = intern.getPlugin('chai');
chai.use(chaiSubset);
const { expect } = chai;
const { describe, it, before, after, afterEach } = intern.getInterface('bdd');

describe('Analyzer', function() {
	let clock;

	before(function() {
		del.sync(`${__dirname}/output`);
		clock = sinon.useFakeTimers();
	});

	afterEach(function() {
		del.sync(`${__dirname}/output`);
	});

	after(function() {
		clock.restore();
	});

	it('should support stats files with all the information in `children` array', function() {
		generateReportFrom('with-children-array.json');
		return expectValidReport();
	});

	it('should support bundles with invalid dynamic require calls', function() {
		generateReportFrom('with-invalid-dynamic-require.json');
		return expectValidReport({ statSize: 136 });
	});

	it('should use information about concatenated modules generated by webpack 4', function() {
		generateReportFrom('with-module-concatenation-info/stats.json');
		return getChartData().then(chartData => {
			expect(chartData[0].groups[0]).to.containSubset(
				require('../../support/fixtures/webpack-bundle-analyzer/stats/with-module-concatenation-info/expected-chart-data')
			);
		});
	});
});

function generateReportFrom(statsFilename) {
	childProcess.execSync(
		`node ../../../../release/webpack-bundle-analyzer/bin/analyzer.js -m static -r output/report.html -O ../../support/fixtures/webpack-bundle-analyzer/stats/${statsFilename}`,
		{ cwd: __dirname }
	);
}

function getChartData() {
	return new Promise((resolve, reject) => {
		fs.readFile(`${__dirname}/output/report.html`, 'utf8', (err, data) => {
			if (err) {
				reject(err);
			}

			resolve(data);
		});
	}).then(contents => JSON.parse(/window.chartData = (.*);[\r\n]/.exec(contents)[1]));
}

function expectValidReport(opts) {
	const { bundleLabel = 'bundle.js', statSize = 141 } = opts || {};

	expect(fs.existsSync(`${__dirname}/output/report.html`)).to.be.true;

	return getChartData().then(chartData => {
		expect(chartData[0]).to.containSubset({
			label: bundleLabel,
			statSize
		});
	});
}
